@typeparam T
@inject IJSRuntime JS

@if(_forceBreak)
{
    <div class="@(Display == Display.Block ? "block" : "matrix-grid-wrapper")">
        <div class="matrix-grid">
            <div class="left-bracket"></div>
            @for (int x = 0; x < Matrix.Length; x++)
            {
                <div class="column">
                    @for (int y = 0; y < Matrix[x].Length; y++)
                    {
                        <div class="cell" id="@CellId(x, y)"></div>
                    }
                </div>
            }
            <div class="right-bracket"></div>
        </div>
    </div>

}
else
{
    <Equation Display="Display" Equation="@matrixAsString" />
}


@code {
    [Parameter]
    public T[][] Matrix { get; set; }

    [Parameter]
    public Display Display { get; set; } = Display.Block;

    private bool _forceBreak => Settings.EquationSettings.ForceBreakMatrices;

    private string matrixId = $"matrix{Guid.NewGuid():N}";

    private string CellId(int i, int j) => $"{matrixId}_cell_{i}_{j}";
    private string matrixAsString { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (_forceBreak && first)
        {
            for (int i = 0; i < Matrix.Length; i++)
            {
                for (int j = 0; j < Matrix[i].Length; j++)
                {
                    await JS.InvokeVoidAsync
                    (
                        "Render",
                         CellId(i, j),
                         Matrix[i][j].ConvertToLaTeX(),
                         false
                    );
                }
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (_forceBreak == false)
        {
            matrixAsString = Matrix.ConvertMatrixToLaTeX();
        }
    }
}