@typeparam TMatrix
@typeparam TOtherMatrix
@inject IJSRuntime JS

@if (_forceBreak)
{
    <div class="@(Display == Display.Block ? "block" : "matrix-grid-wrapper")">
        <div class="matrix-grid">
            <div class="left-bracket"></div>
            @for (int y = 0; y < _columnsCount1; y++)
            {
                <div class="column">
                    @for (int x = 0; x < _rowsCount1; x++)
                    {
                        <div class="cell" id="@CellId(x, y)"></div>
                    }
                </div>
            }
            <div class="augmented-line"></div>
            @for (int y = 0; y < _columnsCount2; y++)
            {
                <div class="column">
                    @for (int x = 0; x < _rowsCount2; x++)
                    {
                        <div class="cell" id="@CellId(x, y + _columnsCount1)"></div>
                    }
                </div>
            }
            <div class="right-bracket"></div>
        </div>
    </div>

}
else
{
    <Equation Display="Display" Equation="@_equation" />
}


@code {
    [Parameter]
    public TMatrix[,] Matrix { get; set; }

    [Parameter]
    public TOtherMatrix[,] OtherMatrix { get; set; }

    [Parameter]
    public Display Display { get; set; } = Display.Block;

    private int _rowsCount1 => Matrix.GetLength(0);
    private int _columnsCount1 => Matrix.GetLength(1);

    private int _rowsCount2 => Matrix.GetLength(0);
    private int _columnsCount2 => Matrix.GetLength(1);

    private bool _forceBreak => Settings.EquationSettings.ForceBreakMatrices;

    private string matrixId = $"matrix{Guid.NewGuid():N}";

    private string CellId(int i, int j) => $"{matrixId}_cell_{i}_{j}";

    private string _equation { get; set; } = string.Empty;

    protected override async Task OnAfterRenderAsync(bool first)
    {
        if (_forceBreak && first)
        {
            for (int y = 0; y < _columnsCount1; y++)
            {
                for (int x = 0; x < _rowsCount1; x++)
                {
                    await JS.InvokeVoidAsync
                    (
                        "Render",
                         CellId(x, y),
                         Matrix[x, y].ConvertToLaTeX(),
                         false
                    );
                }
            }

            for (int y = 0; y < _columnsCount2; y++)
            {
                for (int x = 0; x < _rowsCount2; x++)
                {
                    await JS.InvokeVoidAsync
                    (
                        "Render",
                         CellId(x, y + _columnsCount1),
                         OtherMatrix[x, y].ConvertToLaTeX(),
                         false
                    );
                }
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (_forceBreak == false)
        {
            _equation = Matrix.ConvertTwoMatricesToLaTeX(OtherMatrix);
        }
    }
}