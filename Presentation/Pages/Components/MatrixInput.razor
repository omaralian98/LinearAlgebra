@inject ISnackbar Snackbar
@inject ClipboardService ClipboardService

<MudStack Row Spacing="0" Justify="Justify.FlexStart" StretchItems="StretchItems.None">
    <MudPaper Class="matrix-input-card text" Elevation="10" Square>
        <MudPaper Style="background-color: #35d446; margin: 5px -5px 0px -5px;" Outlined Square Elevation="5">
            <MudText Class="text" Align="Align.Center" Color="Color.Dark" Style="margin: 0 5px;" Typo="Typo.h5">
                Matrix @(Character) Input
            </MudText>
        </MudPaper>

        <MudStack Style="width: fit-content;" Row="false" Justify="Justify.Center" AlignItems="AlignItems.Start">
            <MudStack Style="width: 100%;" Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center">
                <MudText Class="text" Typo="Typo.h6" Inline Color="Color.Tertiary">
                    Rows
                </MudText>
                <MudText Class="text" Typo="Typo.h6" Inline Color="Color.Error">
                    ×
                </MudText>
                <MudText Class="text" Typo="Typo.h6" Inline Color="Color.Tertiary">
                    Columns
                </MudText>
            </MudStack>
            <MudStack Style="width: 100%;" Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudNumericField Class="matrix-input text" Style="color: black; background-color: white; width: 50px; height: 30px;" @bind-Value="@Rows" Immediate Placeholder="Rows" Variant="Variant.Outlined" Underline="false" InputMode="InputMode.numeric" />
                <MudNumericField Class="matrix-input text" Style="color: black; background-color: white; width: 50px; height: 30px;" @bind-Value="@Columns" Immediate Placeholder="Columns" Variant="Variant.Outlined" Underline="false" InputMode="InputMode.numeric" />
            </MudStack>
        </MudStack>

        <br />
        <MudStack Row="false" Justify="Justify.FlexStart" AlignItems="AlignItems.Start">
            <MudSwitch Style="color: white !important;" ThumbIcon="@(EnterMatrixAsString ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" @bind-Value="@EnterMatrixAsString" Size="Size.Small" Color="Color.Tertiary" Ripple>Enter Matrix as Text</MudSwitch>
            @if (EnterMatrixAsString)
            {
                <MudTextField Style="background-color: white !important;" @bind-Value="@MatrixAsString" Lines="3" HelperText="Separate Rows by '|'" FullWidth Immediate AutoGrow />
                <MudButton OnClick="@(async () => {await Paste(MatrixAsString); EnterMatrixAsString = false;})" Color="Color.Tertiary" Variant="Variant.Filled" DropShadow Ripple Size="Size.Small">Convert</MudButton>
            }
            else
            {
                <div align="center">
                    <table class="matrix">
                        @for (int i = 0; i < Rows; i++)
                        {
                            int myI = i;
                            <tr>
                                @for (int j = 0; j < Columns; j++)
                                {
                                    int myJ = j;
                                    <td>
                                        <MudTextField Style="background-color: white !important;height: 30px;width: 50px;" Class="matrix-input text" @bind-Value="@Matrix[myI][myJ]" Variant="Variant.Filled" Underline="false" FullWidth="false" />
                                    </td>
                                }
                            </tr>
                        }
                    </table>
                </div>
            }
        </MudStack>
    </MudPaper>
    <MudStack Row="false" AlignItems="AlignItems.Start" Class="matrix-toolbox" Spacing="0">
        <MudTooltip Delay="1000" Text="Copy" Placement="Placement.Top" Color="Color.Success" Arrow>
            <button @onclick="Copy" class="matrix-toolbox-button">
                <MudImage Src="images/Copy.png" />
            </button>
        </MudTooltip>
        <MudTooltip Delay="1000" Text="Paste" Placement="Placement.Top" Color="Color.Success" Arrow>
            <button @onclick="@(() => Paste())" class="matrix-toolbox-button">
                <MudImage Src="images/Paste.png" />
            </button>
        </MudTooltip>
        <MudTooltip Delay="1000" Text="Random" Placement="Placement.Top" Color="Color.Success" Arrow>
            <button @onclick="Random" class="matrix-toolbox-button">
                <MudImage Src="images/Random.png" />
            </button>
        </MudTooltip>
        <MudTooltip Delay="1000" Text="Clear" Placement="Placement.Top" Color="Color.Success" Arrow>
            <button @onclick="Clear" class="matrix-toolbox-button">
                <MudImage Src="images/Clear.png" />
            </button>
        </MudTooltip>
        <MudTooltip Delay="1000" Text="Set All 0" Placement="Placement.Top" Color="Color.Success" Arrow>
            <button @onclick="SetAllZeros" class="matrix-toolbox-button">
                0
            </button>
        </MudTooltip>
        <MudTooltip Delay="1000" Text="Set All 1" Placement="Placement.Top" Color="Color.Success" Arrow>
            <button @onclick="SetAllOnes" class="matrix-toolbox-button">
                1
            </button>
        </MudTooltip>
    </MudStack>
</MudStack>




@code {
    private int _rows = 3;
    private int _columns = 3;

    public int Rows
    {
        get => _rows;
        set
        {
            if (value < 1)
            {
                value = 1;
            }
            else if (value > Settings.MaxRowsAllowed)
            {
                value = Settings.MaxRowsAllowed;
            }

            _rows = value;
            UpdateMatrixRows(Matrix, Rows, Columns);
            ConvertMatrixToSting();
        }
    }

    public int Columns
    {
        get => _columns;
        set
        {
            if (value < 1)
            {
                value = 1;
            }
            else if (value > Settings.MaxRowsAllowed)
            {
                value = Settings.MaxRowsAllowed;
            }

            _columns = value;
            UpdateMatrixColumns(Matrix, Rows, Columns);
            ConvertMatrixToSting();
        }
    }
    private bool _EnterMatrixAsString = false;
    public bool EnterMatrixAsString
    {
        get => _EnterMatrixAsString;
        set
        {
            if (value == _EnterMatrixAsString)
            {
                return;
            }
            else if (_EnterMatrixAsString)
            {
                Paste(MatrixAsString);
            }
            else
            {
                ConvertMatrixToSting();
            }
            _EnterMatrixAsString = value;
        }
    }

    [Parameter]
    public List<List<string>> Matrix { get; set; } = new();

    [Parameter]
    public EventCallback<List<List<string>>> MatrixChanged { get; set; }

    [Parameter]
    public char Character { get; set; } = ' ';

    public string MatrixAsString { get; set; } = string.Empty;

    private static void UpdateMatrixRows(List<List<string>> Matrix, int Rows, int Columns)
    {
        int difference = Rows - Matrix.Count;

        if (difference > 0)
        {
            for (int i = 0; i < difference; i++)
            {
                Matrix.Add(new List<string>(new string[Columns]));
            }
        }
        else if (difference < 0)
        {
            for (int i = 0; i < -difference; i++)
            {
                Matrix.RemoveAt(Matrix.Count - 1);
            }
        }
    }

    private static void UpdateMatrixColumns(List<List<string>> Matrix, int Rows, int Columns)
    {
        if (Matrix.Count == 0)
            return;

        int currentColumnCount = Matrix[0].Count;
        int difference = Columns - currentColumnCount;

        if (difference > 0)
        {
            foreach (var row in Matrix)
            {
                for (int j = 0; j < difference; j++)
                {
                    row.Add(string.Empty);
                }
            }
        }
        else if (difference < 0)
        {
            foreach (var row in Matrix)
            {
                for (int j = 0; j < -difference; j++)
                {
                    row.RemoveAt(row.Count - 1);
                }
            }
        }
    }

    protected override void OnInitialized()
    {
        for (int i = 0; i < Rows; i++)
        {
            Matrix.Add(new List<string>(new string[Columns]));
        }

        base.OnInitialized();
    }

    public async Task Copy()
    {
        ConvertMatrixToSting();
        var result = await ClipboardService.CopyAsync(MatrixAsString);
        if (result.IsFailure)
        {
            Snackbar.Add(result.Errors[0].ToString(), Severity.Error);
        }
    }

    public async Task Paste(string? text = null)
    {
        if (text is null)
        {
            var result = await ClipboardService.PasteAsync();
            if (result.IsFailure)
            {
                Snackbar.Add(result.Errors[0].ToString(), Severity.Error);
                return;
            }
            text = result.Value!;
        }

        try
        {
            List<List<string>> copiedMatrix = Matrix.Select(innerList => new List<string>(innerList)).ToList();

            int oldRowsCount = Rows;
            int oldColumnsCount = Columns;

            var lines = text.Split(Environment.NewLine);

            oldRowsCount = lines.Length;
            UpdateMatrixRows(copiedMatrix, oldRowsCount, oldColumnsCount);
            for (int i = 0; i < oldRowsCount; i++)
            {
                var row = lines[i].Split(' ');
                int newcolumnsCount = row.Length;
                if (i == 0 || newcolumnsCount > oldColumnsCount)
                {
                    UpdateMatrixColumns(copiedMatrix, oldRowsCount, newcolumnsCount);
                    oldColumnsCount = newcolumnsCount;
                }
                for (int j = 0; j < newcolumnsCount; j++)
                {
                    copiedMatrix[i][j] = row[j];
                }
            }
            Matrix = copiedMatrix;
            Rows = oldRowsCount;
            Columns = oldColumnsCount;
            ConvertMatrixToSting();
        }
        catch
        {
            Snackbar.Add("The Pasted Matrix wasn't in the correct format", Severity.Error);
        }
    }

    public void Clear()
    {
        SetAll(string.Empty);
    }

    public void Random()
    {
        Random rand = new();
        for (int i = 0; i < Matrix.Count; i++)
        {
            for (int j = 0; j < Matrix[i].Count; j++)
            {
                Matrix[i][j] = rand.Next(Settings.Lowerbound, Settings.Upperbound).ToString();
            }
        }
        ConvertMatrixToSting();
    }

    public void SetAllZeros()
    {
        SetAll("0");
    }

    public void SetAllOnes()
    {
        SetAll("1");
    }

    private void SetAll(string value)
    {
        for (int i = 0; i < Matrix.Count; i++)
        {
            for (int j = 0; j < Matrix[i].Count; j++)
            {
                Matrix[i][j] = value;
            }
        }
        ConvertMatrixToSting();
    }

    public void ConvertMatrixToSting()
    {
        StringBuilder text = new();
        for (int i = 0; i < Matrix.Count; i++)
        {
            text.AppendJoin(' ', Matrix[i]);
            if (i + 1 != Matrix.Count)
            {
                text.AppendLine();
            }
        }
        MatrixAsString = text.ToString();
    }
}