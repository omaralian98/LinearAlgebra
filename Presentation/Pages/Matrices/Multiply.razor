@page "/multiply-matrices"

<PageTitle>Multiply Two Matrices</PageTitle>

<MudPaper Elevation="10" Outlined Height="100%" Width="100%" Style="padding: 20px;">
    <h1>Multiply Two Matrices</h1>
    <TwoMatricesPageComponent NameOftheButton="Multiply" OnButtonClick="Execute">
        <Result>
            @if (result is not null)
            {
                <MudStack Class="math-content block" Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Wrap="Wrap.NoWrap">
                    <MathJaxComponent TextToRender="$A \times B =$" />
                    <MatrixComponent Matrix="result" Display="Display.Inline" />
                </MudStack>
            }
        </Result>
        <Steps>
            @if (step is not null)
            {
                <MudStack Class="math-content block" Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Wrap="Wrap.NoWrap">
                    <MatrixComponent Matrix="(MatrixA.ConvertMatrix() ?? [])" Display="Display.Inline" />
                    <MathJaxComponent TextToRender="$\times$" />
                    <MatrixComponent Matrix="(MatrixB.ConvertMatrix() ?? [])" Display="Display.Inline" />
                    <MathJaxComponent TextToRender="$=$" />
                    <MatrixComponent Matrix="step" Display="Display.Inline" />
                    <MathJaxComponent TextToRender="$=$" />
                    <MatrixComponent Matrix="result" Display="Display.Inline" />
                </MudStack>
                <MudStack Class="math-content block" Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Wrap="Wrap.NoWrap">
                    <MatrixComponent Matrix="(MatrixA.ConvertMatrix() ?? [])" Display="Display.Inline" />
                    <MathJaxComponent TextToRender="$\times$" />
                    <MatrixComponent Matrix="(MatrixB.ConvertMatrix() ?? [])" Display="Display.Inline" />
                    <MathJaxComponent TextToRender="$=$" />
                    <MatrixComponent Matrix="step" Display="Display.Inline" />
                    <MathJaxComponent TextToRender="$=$" />
                    <MatrixComponent Matrix="result" Display="Display.Inline" />
                </MudStack>
                <MudStack Class="math-content block" Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Wrap="Wrap.NoWrap">
                    <MatrixComponent Matrix="(MatrixA.ConvertMatrix() ?? [])" Display="Display.Inline" />
                    <MathJaxComponent TextToRender="$\times$" />
                    <MatrixComponent Matrix="(MatrixB.ConvertMatrix() ?? [])" Display="Display.Inline" />
                    <MathJaxComponent TextToRender="$=$" />
                    <MatrixComponent Matrix="step" Display="Display.Inline" />
                    <MathJaxComponent TextToRender="$=$" />
                    <MatrixComponent Matrix="result" Display="Display.Inline" />
                </MudStack>
                <MudStack Class="math-content block" Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Wrap="Wrap.NoWrap">
                    <MathJaxComponent TextToRender="$A \times B =$" />
                    <MatrixComponent Matrix="result" Display="Display.Inline" />
                </MudStack>
            }
        </Steps>
    </TwoMatricesPageComponent>
</MudPaper>


@code {
    private Fraction[,]? MatrixA;
    private Fraction[,]? MatrixB;

    public Fraction[][]? result = null;
    public string[][]? step = null;

    public async Task Execute((Fraction[,] a, Fraction[,] b) matrics)
    {
        await Task.Run(() =>
        {
            MatrixA = matrics.a;
            MatrixB = matrics.b;
            if (Settings.ShowSteps)
            {
                var result = Linear.MultiplyWithResult(matrics.a, matrics.b);
                step = result.Step.ConvertMatrix();
                this.result = result.Result.ConvertMatrix();
            }
            else
            {
                var result = Linear.Multiply<Fraction>(matrics.a, matrics.b);
                this.result = result.ConvertMatrix();
            }
        });
    }
}