@page "/add"

<PageTitle>Add Two Matrices</PageTitle>

<MudPaper Elevation="10" Outlined Height="100%" Width="100%" Style="padding: 20px;">
    <h1>Add Two Matrices</h1>
    <TwoMatricesPageComponent NameOftheButton="Add" OnButtonClick="Execute">
        <Result>
            @if (result is not null)
            {
                <MudStack Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                    <MudText Typo="Typo.h5" Inline>A + B =</MudText>
                    <MatrixComponent Matrix="result" Display="Display.Block" />
                </MudStack>
            }
        </Result>
        <Steps>
            @if (step is not null)
            {
                <MudStack Row Justify="Justify.FlexStart" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                    <MatrixComponent Matrix="MatrixA" Display="Display.Inline" />
                    <MudText Typo="Typo.h5" Inline>+</MudText>
                    <MatrixComponent Matrix="MatrixB" Display="Display.Inline" />
                    <MudText Typo="Typo.h5" Inline>=</MudText>
                    <MatrixComponent Matrix="step" Display="Display.Inline" />
                    <MudText Typo="Typo.h5" Inline>=</MudText>
                    <MatrixComponent Matrix="result" Display="Display.Inline" />
                </MudStack>
            }
        </Steps>
    </TwoMatricesPageComponent>
</MudPaper>


@code {
    private Fraction[,]? MatrixA;
    private Fraction[,]? MatrixB;

    public Fraction[,]? result = null;
    public string[,]? step = null;

    public async Task Execute((Fraction[,] a, Fraction[,] b) matrics)
    {
        await Task.Run(() =>
        {
            MatrixA = matrics.a;
            MatrixB = matrics.b;
            if (Settings.ShowSteps)
            {
                var result = Linear.AddWithResult(matrics.a, matrics.b);
                step = result.Step;
                this.result = result.Result;
            }
            else
            {
                var result = Linear.Add<Fraction>(matrics.a, matrics.b);
                this.result = result;
            }
        });
    }
}